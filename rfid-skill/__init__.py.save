from mycroft import MycroftSkill
import RPi.GPIO as GPIO
from threading import Thread
from multiprocessing import Pool
from .rfid_read import Read
import time

RED = 11
GREEN = 15
GPIO.setwarnings(False)
GPIO.setup(RED, GPIO.OUT)
GPIO.setup(GREEN, GPIO.OUT)
GPIO.output(RED, GPIO.LOW)
GPIO.output(GREEN, GPIO.LOW)


class Rfid(MycroftSkill):
    def __init__(self):
        MycroftSkill.__init__(self)
        self.stopped = False
        self.status = False
        self.thread = Thread(target=self.read_thread)
        self.thread.daemon = True
        self.thread.start()
        print("Hiiiii")
        self.stop = True
        self.stop1 = True

    def read_thread(self):
        while not self.stopped:
            print("MultiProcess2")
            procesRfid = Pool(processes=3)
            print("Muliprocess1")
            resultRfid = procesRfid.apply_async(Read())
            name = Read()
            user = ""
            user = name.userid()
            print("This is User ID in Main : " + user)
            if user != "":
                print("This is Inside Not Equal to Null : " + str(user))
                if user == "Raj" or user == "Eric" or user == "James":
                    if self.stop == True:
                        GPIO.output(GREEN, GPIO.HIGH)
                        GPIO.output(RED, GPIO.LOW)
                        response = {'text': user}
                        self.speak_dialog("to.hello.say", data=response)
                        time.sleep(1)
                        GPIO.output(GREEN, GPIO.LOW)
                        GPIO.output(RED, GPIO.HIGH)
                        time.sleep(1)
                        GPIO.output(RED, GPIO.LOW)
                        GPIO.output(GREEN, GPIO.LOW)
                        self.stop = False
                        self.stop1 = False
            
if user == "":
                print("This is Inside else : " + str(user))
                if self.stop1 == False:
                    self.unconfirm()
                    self.stop = True
                    self.stop1 = True

    def unconfirm(self):
        print ("Working.....")
        GPIO.output(RED, GPIO.HIGH)
        GPIO.output(GREEN, GPIO.LOW)
        self.speak_dialog("to.bye.say")
        time.sleep(2)
        GPIO.output(RED, GPIO.LOW)
        GPIO.output(GREEN, GPIO.LOW)

    def shutdown(self):
        self.stopped = True


def create_skill():
    return Rfid()
